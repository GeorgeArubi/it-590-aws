---
# CloudFormation script
# This script creates a VPC with two subnets in two different AZs

AWSTemplateFormatVersion:       "2010-09-09"
Description:                    Create VPC with public and private subnets in two AZs.


Parameters:

    # Ownership
    Owner:
      Type:                     String
      Default:                  Your Name Here
    Project:
      Type:                     String
      Default:                  Simple VPC
    DateCreated:
      Type:                     String
      Default:                  2021-05-21
    VpcName:
      Type:                     String
      Default:                  VPC Name
    Environment:
      Type:                     String
      Default:                  dev
      AllowedValues:
      - dev
      - prod
      - test

    # VPC Cidr Block Address
    VPCCidrBlock:
        Description:            10.0.0.0/16 = (10.0.0.0-10.0.255.255)-5 reserved IPs by AWS = 251 Subnets = 65529 hosts
        Type:                   String
        Default:                10.0.0.0/16
        MinLength:              "10"
        MaxLength:              "18"
        AllowedPattern:         "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

    # Availability Zones
    AvailabilityZone1:
        Type:                   String
        Default:                a
        AllowedValues:
        - a
        - b
        - c
        - d
        - e
        - f
    AvailabilityZone2:
        Type:                   String
        Default:                b
        AllowedValues:
        - a
        - b
        - c
        - d
        - e
        - f

    # Subnet Cidr blocks
    PublicSubnetCidrBlock1:
        Type:                   String
        Default:                10.0.1.0/24
        MinLength:              "10"
        MaxLength:              "18"
        AllowedPattern:         "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    PrivateSubnetCidrBlock11:
        Type:                   String
        Default:                10.0.11.0/24
        MinLength:              "10"
        MaxLength:              "18"
        AllowedPattern:         "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

    PublicSubnetCidrBlock2:
        Type:                   String
        Default:                10.0.2.0/24
        MinLength:              "10"
        MaxLength:              "18"
        AllowedPattern:         "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    PrivateSubnetCidrBlock12:
        Type:                   String
        Default:                10.0.12.0/24
        MinLength:              "10"
        MaxLength:              "18"
        AllowedPattern:         "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"


Resources:
    # VPC
    VPC:
        Type:                   AWS::EC2::VPC
        Properties:
            CidrBlock:          !Ref VPCCidrBlock
            EnableDnsSupport:   true
            EnableDnsHostnames: true
            InstanceTenancy:    default
            Tags:
            - Key:              Name
              Value:            !Join ['-', [!Ref 'AWS::StackName',!Ref VpcName, !Ref Environment ]]
            - Key:              Owner
              Value:            !Ref Owner
            - Key:              Project
              Value:            !Ref Project
            - Key:              Created
              Value:            !Ref DateCreated
            - Key:              Environment
              Value:            !Ref Environment



    # Internet Gateway
    IGW:
        DependsOn:              VPC
        Type:                   AWS::EC2::InternetGateway
        Properties:
          Tags:
          - Key:                Name
            Value:              !Join ['-', [!Ref VpcName, IGW]]

    GWAttachment:
        Type:                   AWS::EC2::VPCGatewayAttachment
        Properties:
          VpcId:                !Ref VPC
          InternetGatewayId:    !Ref IGW



    # Subnets
    PublicSubnet1:
        Type:                   AWS::EC2::Subnet
        Properties:
          VpcId:                !Ref VPC
          AvailabilityZone:     !Join [ '', [!Ref 'AWS::Region', !Ref AvailabilityZone1]]
          CidrBlock:            !Ref PublicSubnetCidrBlock1
          Tags:
          - Key:                Name
            Value:              !Join ['-', [!Ref 'AWS::StackName', sn, public, az, !Ref AvailabilityZone1 ]]
          - Key:                Environment
            Value:              !Ref Environment


    PrivateSubnet1:
        Type:                   AWS::EC2::Subnet
        Properties:
          VpcId:                !Ref VPC
          AvailabilityZone:     !Join [ '', [!Ref 'AWS::Region', !Ref AvailabilityZone1]]
          CidrBlock:            !Ref PrivateSubnetCidrBlock11
          Tags:
          - Key:                Name
            Value:              !Join ['-', [!Ref 'AWS::StackName', sn, private, az, !Ref AvailabilityZone1 ]]
          - Key:                Environment
            Value:              !Ref Environment


    PublicSubnet2:
        Type:                   AWS::EC2::Subnet
        Properties:
          VpcId:                !Ref VPC
          AvailabilityZone:     !Join [ '', [!Ref 'AWS::Region', !Ref AvailabilityZone2]]
          CidrBlock:            !Ref PublicSubnetCidrBlock2
          Tags:
          - Key:                Name
            Value:              !Join ['-', [!Ref 'AWS::StackName', sn, public, az, !Ref AvailabilityZone2 ]]
          - Key:                Environment
            Value:              !Ref Environment


    PrivateSubnet2:
        Type:                   AWS::EC2::Subnet
        Properties:
          VpcId:                !Ref VPC
          AvailabilityZone:     !Join [ '', [!Ref 'AWS::Region', !Ref AvailabilityZone2]]
          CidrBlock:            !Ref PrivateSubnetCidrBlock12
          Tags:
          - Key:                Name
            Value:              !Join ['-', [!Ref 'AWS::StackName', sn, private, az, !Ref AvailabilityZone2 ]]
          - Key:                Environment
            Value:              !Ref Environment

    # Public Route Table | Routes | Public Subnet Associations | Main Network ACL
    PublicRT:
      Type:                     AWS::EC2::RouteTable
      Properties:
        VpcId:                  !Ref VPC

        Tags:
        - Key:                  Environment
          Value:                !Ref Environment
        - Key:                  Name
          Value:                !Join ['-', [!Ref 'AWS::StackName', !Ref VpcName, public, RT]]


    PublicRoute1:
       Type:                    AWS::EC2::Route
       Properties:
         RouteTableId:          !Ref PublicRT
         DestinationCidrBlock:  0.0.0.0/0
         GatewayId:             !Ref IGW

    PublicSubnet1RTAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRT
        SubnetId: !Ref PublicSubnet1

    PublicSubnet2RTAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRT
        SubnetId: !Ref PublicSubnet2

    PublicNACL:
      Type: AWS::EC2::NetworkAcl
      Properties:
         VpcId:
           Ref: myVPC
         Tags:
         - Key: Name
           Value: !Join ['-', [!Ref 'AWS::StackName', !Ref VpcName]]
         - Key: Environment
           Value: !Ref Environment



    # NAT Gateway and ElasticIP
    NAT:
       Type:                    AWS::EC2::NatGateway
       Properties:
          AllocationId:
             Fn::GetAtt:
             - NatEIP
             - AllocationId
          SubnetId:             !Ref PrivateSubnet1
          Tags:
          - Key:                Environment
            Value:              !Ref Environment
          - Key:                Name
            Value:              !Join ['-', [!Ref VpcName, NAT]]

    NatEIP:
       DependsOn:               GWAttachment
       Type:                    AWS::EC2::EIP
       Properties:
          Domain:               vpc






...
