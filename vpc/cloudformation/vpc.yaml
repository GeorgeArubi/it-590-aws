---
# CloudFormation script
# This script creates a VPC with two subnets in two different AZs

AWSTemplateFormatVersion:                 "2010-09-09"
Description:                              Create VPC with public and private subnets in three AZs.


Parameters:

    # Ownership
    OwnerParameter:
      Type:                               String
      Default:                            Your Name Here
    ProjectParameter:
      Type:                               String
      Default:                            Simple VPC
    DateCreatedParameter:
      Type:                               String
      Default:                            2021-05-21
    VpcNameParameter:
      Type:                               String
      Default:                            VPC Name
    EnvironmentParameter:
      Type:                               String
      Default:                            dev
      AllowedValues:
      - dev
      - prod
      - test

    # VPC Cidr Block Address
    VPCCidrBlock:
        Description:                      10.0.0.0/16 = (10.0.0.0-10.0.255.255)-5 reserved IPs by AWS = 251 Subnets = 65529 hosts
        Type:                             String
        Default:                          10.0.0.0/16
        MinLength:                        "10"
        MaxLength:                        "18"
        AllowedPattern:                   "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

    # Availability Zones
    AvailabilityZone1:
        Type:                             String
        Default:                          a
        AllowedValues:
        - a
        - b
        - c
        - d
        - e
        - f
    AvailabilityZone2:
        Type:                             String
        Default:                          b
        AllowedValues:
        - a
        - b
        - c
        - d
        - e
        - f

    AvailabilityZone3:
        Type:                             String
        Default:                          c
        AllowedValues:
        - a
        - b
        - c
        - d
        - e
        - f

    # Subnet Cidr blocks
    PublicSubnetCidrBlock1:
        Type:                             String
        Default:                          10.0.1.0/24
        MinLength:                        "10"
        MaxLength:                        "18"
        AllowedPattern:                   "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

    PrivateSubnetCidrBlock11:
        Type:                             String
        Default:                          10.0.11.0/24
        MinLength:                        "10"
        MaxLength:                        "18"
        AllowedPattern:                   "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

    PublicSubnetCidrBlock2:
        Type:                             String
        Default:                          10.0.2.0/24
        MinLength:                        "10"
        MaxLength:                        "18"
        AllowedPattern:                   "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

    PrivateSubnetCidrBlock12:
        Type:                             String
        Default:                          10.0.12.0/24
        MinLength:                        "10"
        MaxLength:                        "18"
        AllowedPattern:                   "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"


    PublicSubnetCidrBlock3:
        Type:                             String
        Default:                          10.0.3.0/24
        MinLength:                        "10"
        MaxLength:                        "18"
        AllowedPattern:                   "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

    PrivateSubnetCidrBlock13:
        Type:                             String
        Default:                          10.0.13.0/24
        MinLength:                        "10"
        MaxLength:                        "18"
        AllowedPattern:                   "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"


    SecurityGroupAllowedIP:
        Description:                      The IP from which remote SSH is allowed. Use https://whatsmyip.org
        Type:                             String
        Default:                          68.100.27.133/32
        MinLength:                        "10"
        MaxLength:                        "18"
        AllowedPattern:                   "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"


Resources:
    # VPC
    VPC:
        Type:                             AWS::EC2::VPC
        Properties:
            CidrBlock:                    !Ref VPCCidrBlock
            EnableDnsSupport:             true
            EnableDnsHostnames:           true
            InstanceTenancy:              default
            Tags:
            - Key:                        Name
              Value:                      !Join ['-', [!Ref "AWS::StackName", VPC ]]
            - Key:                        Owner
              Value:                      !Ref OwnerParameter
            - Key:                        Project
              Value:                      !Ref ProjectParameter
            - Key:                        Created
              Value:                      !Ref DateCreatedParameter
            - Key:                        Environment
              Value:                      !Ref EnvironmentParameter



    # Internet Gateway
    IGW:
        DependsOn:                        VPC
        Type:                             AWS::EC2::InternetGateway
        Properties:
          Tags:
          - Key:                          Name
            Value:                        !Join ['-', [!Ref "AWS::StackName", IGW]]

    GWAttachment:
        DependsOn:                        IGW
        Type:                             AWS::EC2::VPCGatewayAttachment
        Properties:
          VpcId:                          !Ref VPC
          InternetGatewayId:              !Ref IGW



    # Subnets
    PublicSubnet1:
        Type:                             AWS::EC2::Subnet
        Properties:
          VpcId:                          !Ref VPC
          AvailabilityZone:               !Join [ '', [!Ref 'AWS::Region', !Ref AvailabilityZone1]]
          CidrBlock:                      !Ref PublicSubnetCidrBlock1
          MapPublicIpOnLaunch:            true
          Tags:
          - Key:                          Name
            Value:                        !Join ['-', [!Ref "AWS::StackName", sn, public, az, !Ref AvailabilityZone1 ]]
          - Key:                          Environment
            Value:                        !Ref EnvironmentParameter


    PrivateSubnet1:
        Type:                             AWS::EC2::Subnet
        Properties:
          VpcId:                          !Ref VPC
          AvailabilityZone:               !Join [ '', [!Ref 'AWS::Region', !Ref AvailabilityZone1]]
          CidrBlock:                      !Ref PrivateSubnetCidrBlock11
          Tags:
          - Key:                          Name
            Value:                        !Join ['-', [!Ref "AWS::StackName", sn, private, az, !Ref AvailabilityZone1 ]]
          - Key:                          Environment
            Value:                        !Ref EnvironmentParameter


    PublicSubnet2:
        Type:                             AWS::EC2::Subnet
        Properties:
          VpcId:                          !Ref VPC
          AvailabilityZone:               !Join [ '', [!Ref 'AWS::Region', !Ref AvailabilityZone2]]
          CidrBlock:                      !Ref PublicSubnetCidrBlock2
          MapPublicIpOnLaunch:            true
          Tags:
          - Key:                          Name
            Value:                        !Join ['-', [!Ref "AWS::StackName", sn, public, az, !Ref AvailabilityZone2 ]]
          - Key:                          Environment
            Value:                        !Ref EnvironmentParameter


    PrivateSubnet2:
        Type:                             AWS::EC2::Subnet
        Properties:
          VpcId:                          !Ref VPC
          AvailabilityZone:               !Join [ '', [!Ref 'AWS::Region', !Ref AvailabilityZone2]]
          CidrBlock:                      !Ref PrivateSubnetCidrBlock12
          Tags:
          - Key:                          Name
            Value:                        !Join ['-', [!Ref "AWS::StackName", sn, private, az, !Ref AvailabilityZone2 ]]
          - Key:                          Environment
            Value:                        !Ref EnvironmentParameter


    PublicSubnet3:
        Type:                             AWS::EC2::Subnet
        Properties:
          VpcId:                          !Ref VPC
          AvailabilityZone:               !Join [ '', [!Ref 'AWS::Region', !Ref AvailabilityZone3]]
          CidrBlock:                      !Ref PublicSubnetCidrBlock3
          MapPublicIpOnLaunch:            true
          Tags:
          - Key:                          Name
            Value:                        !Join ['-', [!Ref "AWS::StackName", sn, public, az, !Ref AvailabilityZone3 ]]
          - Key:                          Environment
            Value:                        !Ref EnvironmentParameter

    PrivateSubnet3:
        Type:                             AWS::EC2::Subnet
        Properties:
          VpcId:                          !Ref VPC
          AvailabilityZone:               !Join [ '', [!Ref 'AWS::Region', !Ref AvailabilityZone3]]
          CidrBlock:                      !Ref PrivateSubnetCidrBlock13
          Tags:
          - Key:                          Name
            Value:                        !Join ['-', [!Ref "AWS::StackName", sn, private, az, !Ref AvailabilityZone3 ]]
          - Key:                          Environment
            Value:                        !Ref EnvironmentParameter


    # Public Route Table | Routes | Public Subnet Associations | Main Network ACL
    PublicRT:
      Type:                               AWS::EC2::RouteTable
      Properties:
        VpcId:                            !Ref VPC
        Tags:
        - Key:                            Environment
          Value:                          !Ref EnvironmentParameter
        - Key:                            Name
          Value:                          !Join ['-', [!Ref "AWS::StackName", public, RT]]
        - Key:                            Network
          Value:                          public


    PublicRoute1:
       DependsOn:                         GWAttachment
       Type:                              AWS::EC2::Route
       Properties:
         RouteTableId:                    !Ref PublicRT
         DestinationCidrBlock:            "0.0.0.0/0"
         GatewayId:                       !Ref IGW

    PublicSubnet1RTAssociation:
      DependsOn:                          PublicRT
      Type:                               AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:                     !Ref PublicRT
        SubnetId:                         !Ref PublicSubnet1

    PublicSubnet2RTAssociation:
      DependsOn:                          PublicRT
      Type:                               AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:                     !Ref PublicRT
        SubnetId:                         !Ref PublicSubnet2

    PublicSubnet3RTAssociation:
      DependsOn:                          PublicRT
      Type:                               AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:                     !Ref PublicRT
        SubnetId:                         !Ref PublicSubnet3

    PublicNACL:
      Type:                               AWS::EC2::NetworkAcl
      Properties:
         VpcId:                           !Ref VPC
         Tags:
         - Key:                           Name
           Value:                         !Join ['-', [!Ref "AWS::StackName", NACL]]
         - Key:                           Environment
           Value:                         !Ref EnvironmentParameter

    InboundRule:
      Type:                               AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId:                    !Ref PublicNACL
         RuleNumber:                      100
         Protocol:                        -1
         RuleAction:                      allow
         CidrBlock:                       "0.0.0.0/0"

    OutboundRule:
      Type:                               AWS::EC2::NetworkAclEntry
      Properties:
         NetworkAclId:                    !Ref PublicNACL
         RuleNumber:                      100
         Protocol:                        -1
         Egress:                          true
         RuleAction:                      allow
         CidrBlock:                       "0.0.0.0/0"


    PublicSubnet1NACLAssociation:
       Type:                              AWS::EC2::SubnetNetworkAclAssociation
       Properties:
         SubnetId:                        !Ref PublicSubnet1
         NetworkAclId:                    !Ref PublicNACL

    PublicSubnet2NACLAssociation:
       Type:                              AWS::EC2::SubnetNetworkAclAssociation
       Properties:
         SubnetId:                        !Ref PublicSubnet2
         NetworkAclId:                    !Ref PublicNACL

    PublicSubnet3NACLAssociation:
       Type:                              AWS::EC2::SubnetNetworkAclAssociation
       Properties:
         SubnetId:                        !Ref PublicSubnet3
         NetworkAclId:                    !Ref PublicNACL



    # NAT Gateway | ElasticIP | Private Subnet Attachments
    # NAT Gateway attached to public subnet
    # Private subnets associate with NAT Gateway

    NatPublicEIP:
       DependsOn:                         GWAttachment
       Type:                              AWS::EC2::EIP
       Properties:
          Domain:                         vpc

    NATGW:
       DependsOn:                         NatPublicEIP
       Type:                              AWS::EC2::NatGateway
       Properties:
          AllocationId:                   !GetAtt NatPublicEIP.AllocationId
          SubnetId:                       !Ref PublicSubnet1
          Tags:
          - Key:                          Environment
            Value:                        !Ref EnvironmentParameter
          - Key:                          Name
            Value:                        !Join ['-', [!Ref "AWS::StackName", NATGW]]

    PrivateRouteTable:
        Type:                             AWS::EC2::RouteTable
        Properties:
          VpcId:                          !Ref VPC
          Tags:
            - Key:                        Name
              Value:                      !Join ['-', [!Ref "AWS::StackName", Private, RT]]
            - Key:                        Network
              Value:                      Private

    PrivateRoute1:
        Type:                             AWS::EC2::Route
        Properties:
          RouteTableId:                   !Ref PrivateRouteTable
          DestinationCidrBlock:           "0.0.0.0/0"
          NatGatewayId:                   !Ref NATGW

    PrivateSubnet1RouteTableAssociation:
        Type:                             AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId:                       !Ref PrivateSubnet1
          RouteTableId:                   !Ref PrivateRouteTable

    PrivateSubnet2RouteTableAssociation:
        Type:                             AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId:                       !Ref PrivateSubnet2
          RouteTableId:                   !Ref PrivateRouteTable

    PrivateSubnet3RouteTableAssociation:
        Type:                             AWS::EC2::SubnetRouteTableAssociation
        Properties:
          SubnetId:                       !Ref PrivateSubnet3
          RouteTableId:                   !Ref PrivateRouteTable

    # A Default Security Group
    DefaultSecurityGroup:
        Type:                             AWS::EC2::SecurityGroup
        Properties:
          GroupDescription:               Restrict SSH from known IP address
          GroupName:                      SSHOnlyFromHome
          VpcId:                          !Ref VPC
          SecurityGroupIngress:
            - IpProtocol:                 tcp
              FromPort:                   22
              ToPort:                     22
              CidrIp:                     !Ref SecurityGroupAllowedIP
          SecurityGroupEgress:
            - IpProtocol:                 -1
              CidrIp:                     0.0.0.0/0
          Tags:
            - Key:                        Environment
              Value:                      !Ref EnvironmentParameter
            - Key:                        Name
              Value:                      !Join ['-', [!Ref "AWS::StackName", "SSH Known IP"]]

    NFSSgIngress:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          GroupId: !Ref DefaultSecurityGroup
          SourceSecurityGroupId: !Ref DefaultSecurityGroup

    RDSManagementSecurityGroup:
        Type:                             AWS::EC2::SecurityGroup
        Properties:
          GroupDescription:               Restrict HTTP/S from known IP address
          GroupName:                      HTTPOnlyFromHome
          VpcId:                          !Ref VPC
          SecurityGroupIngress:
            - IpProtocol:                 tcp
              FromPort:                   80
              ToPort:                     80
              CidrIp:                     !Ref SecurityGroupAllowedIP
            - IpProtocol:                 tcp
              FromPort:                   443
              ToPort:                     443
              CidrIp:                     !Ref SecurityGroupAllowedIP
          SecurityGroupEgress:
            - IpProtocol:                 -1
              CidrIp:                     0.0.0.0/0
          Tags:
            - Key:                        Environment
              Value:                      !Ref EnvironmentParameter
            - Key:                        Name
              Value:                      !Join ['-', [!Ref "AWS::StackName", "HTTP Known IP"]]



#Stack Outputs
Outputs:
  VPCId:
    Description:                          VPC ID
    Value:                                !Ref VPC
    Export:
      Name:                               !Join ['-', [!Ref "AWS::StackName", VPCID]]
  PublicSubnet1:
    Description:                          Public Subnet 1
    Value:                                !Ref PublicSubnet1
    Export:
      Name:                               !Join ['-', [!Ref "AWS::StackName", PublicSubnet1]]
  PublicSubnet2:
    Description:                          Public Subnet 2
    Value:                                !Ref PublicSubnet2
    Export:
      Name:                               !Join ['-', [!Ref "AWS::StackName", PublicSubnet2]]

  PublicSubnet3:
    Description:                          Public Subnet 3
    Value:                                !Ref PublicSubnet3
    Export:
      Name:                               !Join ['-', [!Ref "AWS::StackName", PublicSubnet3]]

  PrivateSubnet1:
    Description:                          Private Subnet 1
    Value:                                !Ref PrivateSubnet1
    Export:
      Name:                               !Join ['-', [!Ref "AWS::StackName", PrivateSubnet1]]
  PrivateSubnet2:
    Description:                          Private Subnet 2
    Value:                                !Ref PrivateSubnet2
    Export:
      Name:                               !Join ['-', [!Ref "AWS::StackName", PrivateSubnet2]]
  PrivateSubnet3:
    Description:                          Private Subnet 3
    Value:                                !Ref PrivateSubnet3
    Export:
      Name:                               !Join ['-', [!Ref "AWS::StackName", PrivateSubnet3]]
  DefaultSecurityGroup:
    Description:                          Default Security Group SSH Only
    Value:                                !Ref DefaultSecurityGroup
    Export:
      Name:                               !Join ['-', [!Ref "AWS::StackName", DefaultSecurityGroup]]
  RDSManagementSecurityGroup:
    Description:                          RDS Management Security Group HTTP from known IP
    Value:                                !Ref RDSManagementSecurityGroup
    Export:
      Name:                               !Join ['-', [!Ref "AWS::StackName", RDSManagementSecurityGroup]]
